// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement()) @map("id")
  email        String     @unique @map("email")
  firstName    String?    @map("first_name")
  lastName     String?    @map("last_name")
  passwordHash String     @map("password_hash")
  roles        Role[]     @default([user]) @map("roles")
  isPremium    Boolean    @map("is_premium")
  blogs        Blog[]     @relation("BlogAuthor")
  documents    Document[] @relation("DocumentCreator")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")

  @@map("leg_users")
}

enum Role {
  user
  admin
}

model Meta {
  id          Int          @id @default(autoincrement()) @map("id")
  name        String       @map("name")
  description String?      @map("description")
  slug        String?      @map("slug")
  type        MetaType     @map("type")
  entityMeta  EntityMeta[] @relation("MetaToEntityMeta")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")

  @@map("leg_metas")
}

enum MetaType {
  tag
  category
}

model Blog {
  id             Int          @id @default(autoincrement()) @map("id")
  title          String       @map("title")
  summary        String       @map("summary")
  content        String       @map("content")
  status         Status       @map("status")
  isPremium      Boolean      @map("is_premium")
  authorId       Int          @map("author_id")
  author         User         @relation("BlogAuthor", fields: [authorId], references: [id])
  entityMeta     EntityMeta[] @relation("BlogToEntityMeta")
  fromReferences Reference[]  @relation("FromBlogReferences")
  toReferences   Reference[]  @relation("ToBlogReferences")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@map("leg_blogs")
}

model Document {
  id             Int          @id @default(autoincrement()) @map("id")
  title          String       @map("title")
  summary        String?      @map("summary")
  content        String?      @map("content")
  status         Status?      @map("status")
  isPublic       Boolean?     @map("is_public")
  creatorId      Int          @map("creator_id")
  creator        User         @relation("DocumentCreator", fields: [creatorId], references: [id])
  sections       Section[]
  entityMeta     EntityMeta[] @relation("DocumentToEntityMeta")
  notes          Note[]       @relation("DocumentToNotes")
  fromReferences Reference[]  @relation("FromDocumentReferences")
  toReferences   Reference[]  @relation("ToDocumentReferences")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@map("leg_documents")
}

model Section {
  id             Int          @id @default(autoincrement()) @map("id")
  documentId     Int          @map("document_id")
  document       Document     @relation(fields: [documentId], references: [id])
  title          String       @map("title")
  content        String?      @map("content")
  status         Status?      @map("status")
  isPublic       Boolean?     @map("is_public")
  version        String?      @map("version")
  parentId       Int?         @map("parent_id")
  parent         Section?     @relation("SectionHierarchy", fields: [parentId], references: [id])
  children       Section[]    @relation("SectionHierarchy")
  entityMeta     EntityMeta[] @relation("SectionToEntityMeta")
  notes          Note[]       @relation("SectionToNotes")
  fromReferences Reference[]  @relation("FromSectionReferences")
  toReferences   Reference[]  @relation("ToSectionReferences")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@map("leg_sections")
}

model Note {
  id         Int            @id @default(autoincrement()) @map("id")
  title      String         @map("title")
  content    String         @map("content")
  entityType NoteEntityType @map("entity_type")
  entityId   Int            @map("entity_id")
  document   Document?      @relation("DocumentToNotes", fields: [entityId], references: [id], map: "leg_notes_document_id_fkey")
  section    Section?       @relation("SectionToNotes", fields: [entityId], references: [id], map: "leg_notes_section_id_fkey")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")

  @@map("leg_notes")
}

model EntityMeta {
  id         Int        @id @default(autoincrement()) @map("id")
  entityType EntityType @map("entity_type")
  content    String?    @map("content")

  // Separate nullable foreign keys for each entity type
  blogId     Int? @map("blog_id")
  documentId Int? @map("document_id")
  sectionId  Int? @map("section_id")

  // Relations using distinct foreign key columns
  blog     Blog?     @relation("BlogToEntityMeta", fields: [blogId], references: [id], map: "leg_entity_meta_blog_id_fkey")
  document Document? @relation("DocumentToEntityMeta", fields: [documentId], references: [id], map: "leg_entity_meta_document_id_fkey")
  section  Section?  @relation("SectionToEntityMeta", fields: [sectionId], references: [id], map: "leg_entity_meta_section_id_fkey")

  meta   Meta @relation("MetaToEntityMeta", fields: [metaId], references: [id])
  metaId Int  @map("meta_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("leg_entity_meta")
}

model Reference {
  id             Int                 @id @default(autoincrement()) @map("id")
  content        String?             @map("content")
  fromEntityType ReferenceEntityType @map("from_entity_type")
  toEntityType   ReferenceEntityType @map("to_entity_type")
  // Separate nullable foreign keys for source entity
  fromBlogId     Int?                @map("from_blog_id")
  fromDocumentId Int?                @map("from_document_id")
  fromSectionId  Int?                @map("from_section_id")

  // Separate nullable foreign keys for target entity
  toBlogId     Int? @map("to_blog_id")
  toDocumentId Int? @map("to_document_id")
  toSectionId  Int? @map("to_section_id")

  // Relations using distinct foreign key columns
  fromBlog     Blog?     @relation("FromBlogReferences", fields: [fromBlogId], references: [id], map: "leg_references_from_blog_id_fkey")
  fromDocument Document? @relation("FromDocumentReferences", fields: [fromDocumentId], references: [id], map: "leg_references_from_document_id_fkey")
  fromSection  Section?  @relation("FromSectionReferences", fields: [fromSectionId], references: [id], map: "leg_references_from_section_id_fkey")
  toBlog       Blog?     @relation("ToBlogReferences", fields: [toBlogId], references: [id], map: "leg_references_to_blog_id_fkey")
  toDocument   Document? @relation("ToDocumentReferences", fields: [toDocumentId], references: [id], map: "leg_references_to_document_id_fkey")
  toSection    Section?  @relation("ToSectionReferences", fields: [toSectionId], references: [id], map: "leg_references_to_section_id_fkey")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  @@map("leg_references")
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EntityType {
  blog
  document
  section
}

enum NoteEntityType {
  document
  section
}

enum ReferenceEntityType {
  blog
  document
  section
}
